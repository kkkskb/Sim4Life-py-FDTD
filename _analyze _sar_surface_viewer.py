# -*- coding: utf-8 -*-
# This script was auto-generated by Sim4Life version 7.2.4.14019

import numpy
import s4l_v1.analysis as analysis
import s4l_v1.document as document
import s4l_v1.model as model
import s4l_v1.units as units
from s4l_v1 import ReleaseVersion
from s4l_v1 import Unit

try:
    # Define the version to use for default values
    ReleaseVersion.set_active(ReleaseVersion.version7_2)
    
    # Creating the analysis pipeline
    # Adding a new SimulationExtractor
    simulation = document.AllSimulations["standing_per30deg - Phi_030_VPol"] # このシミュレーション名をご自身のものに変更してください
    simulation_extractor = simulation.Results()

    # Adding a new EmSensorExtractor
    em_sensor_extractor = simulation_extractor["Overall Field"]
    em_sensor_extractor.FrequencySettings.ExtractedFrequency = u"All"
    document.AllAlgorithms.Add(em_sensor_extractor)

    # Adding a new FieldMaskingFilter
    inputs = [em_sensor_extractor.Outputs["SAR(x,y,z,f0)"]]
    field_masking_filter = analysis.core.FieldMaskingFilter(inputs=inputs)
    field_masking_filter.UpdateAttributes()
    
    # --- HIGHLIGHT START: 材料名によるマスキングに変更 ---
    materials = field_masking_filter.MaterialIds()
    if materials: # materialsリストが空でないことを確認
        print("\nINFO: Applying material masking based on name.")
        for material_id_obj in materials:
            # MaterialIdオブジェクトには.Name属性と.Id属性があります
            if material_id_obj.Name == "Background":
                field_masking_filter.SetMaterial(material_id_obj, False) # Backgroundはマスクしない (表示する)
                print(f"DEBUG: Material '{material_id_obj.Name}' (ID: {material_id_obj.Id}) set to False (not masked).")
            else:
                field_masking_filter.SetMaterial(material_id_obj, True) # その他の材料はマスクする (非表示にする)
                print(f"DEBUG: Material '{material_id_obj.Name}' (ID: {material_id_obj.Id}) set to True (masked).")
    else:
        print("WARNING: No materials found for FieldMaskingFilter. Skipping material masking.")
    # --- HIGHLIGHT END ---

    field_masking_filter.UpdateAttributes()
    document.AllAlgorithms.Add(field_masking_filter)

    # --- dB表記への変換ロジック ---
    # Adding a new Logarithm algorithm to convert SAR to dB scale
    logarithm_converter = analysis.core.Logarithm(inputs=[field_masking_filter.Outputs["SAR(x,y,z,f0)"]])
    logarithm_converter.UpdateAttributes()
    document.AllAlgorithms.Add(logarithm_converter)

    # Adding a new SurfaceViewer
    # 入力はLogarithmアルゴリズムの出力に接続
    inputs_surface_viewer = [logarithm_converter.Outputs["Logarithm"]] # Logarithmの出力を接続
    surface_viewer = analysis.viewers.SurfaceViewer(inputs=inputs_surface_viewer)
    surface_viewer.Data.Mode = surface_viewer.Data.Mode.enum.QuantityRealPart # 実部で表示
    surface_viewer.UpdateAttributes()
    document.AllAlgorithms.Add(surface_viewer)

except Exception as exc:
    import traceback
    traceback.print_exc()
    # Reset active version to default
    ReleaseVersion.reset()
    raise(exc)
